read.table(hw1_data)
read.csv(hw1_data.csv)
read.csv("hw1_data.csv")
data <- "hw1_data.csv"
read.csv(data)
cnames = data[1,]
file <- "hw1_data.csv"
data <- read.csv(file)
data
cnames = data[1,]
cnames
dimnames(data)
colnames(data)
data[1:2,]
row(data)
data[152:153,]
data[Ozone,47]
data["Ozone",47]
data[[Ozone],47]
colnames(data)
colnames(data == "Ozone")
colnames(data) == "Ozone"
ozone <- colnames(data) == "Ozone"
data[ozone,47]
data[1,47]
data[1,]
data[,4]
data[47,"Ozone"]
data[47,ozone]
data[47,1]
is.na(data)
is.na(data[,"Ozone"])
OzoneNA <- is.na(data[,"Ozone"])
OzoneNA > TRUE
OzoneNA == TRUE
Ozone = data[,"Ozone"]
OzoneNA <- is.na(Ozone)
good <- Ozone[!OzoneNA]
good
bad <- Ozone[OzoneNA]
bad
mean(good)
data[,c("Ozone","Temp","Solar.R")]
three <- data[,c("Ozone","Temp","Solar.R")]
three
three[,"Ozone">31]
three[,"Ozone" > 31]
three$Ozone
three$Ozone > 31
three[["Ozone"]]
three
three[OzoneNA]
three[,c("Ozone" > 31, "Temp" > 90)]
three[c("Ozone" > 31, "Temp" > 90),]
good2 <- complete.cases(three)
good2
three[good2]
three[good2,]
three["Ozone" > 31,]
good3 <- three[good2,]
good3
good3["Ozone" > 31,]
good3["Oxygen" > 31]
good3["Oxygen" > 31,]
good3[,"Oxygen" > 31]
"Oxygen" > 31
good3[,1]
good3[,1] > 31
o31 <- good3[,1] > 31
good3[o31,]
o31table <- good3[o31,]
o90 <- o31table[,2] > 90
finaltable <- o31table[o90,]
finaltable
mean(finaltable["Solar.R"])
finaltable[,"Solar.R"]
mean(finaltable[,"Solar.R"])
TandM <- data[,c("Temp","Month")]
TandM
June <- TandM[,"Month"] == 6
JUne
June
TandM[June,]
JuneTable <- TandM[June,]
JuneTempable <- JuneTable[,"Temp"]
JuneTempTable <- JuneTable[,"Temp"]
JuneTempTable
mean(JuneTempTable)
OandMTable <- data[,c("Ozone","Month")]
MayTable <- OandMTable
MayV <- OandMTable[,"Month"] == 5
MayTable <- OandMTable[MayV,]
MayTable
max(MayTable[,"Ozone"])
MayOTable <- MayTable[,"Ozone"]
MayOTable
TableNA <- is.na(MayOTable)
TableNA
MayOTable[!TableNA,]
MayOTable[,!TableNA]
MayOTable[!TableNA]
max(MayOTable[!TableNA])
install.packages("swirl")
library(swirl)
ls()
rm(list = ls())
ls()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
play()
rm(list = ls())
ls()
x <- 9
ls()
nxt()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
play()
file.info("mytest.R")$mode
nxt()
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:11
15:1
play()
rm(list = ls())
nxt()
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
play()
rm(list = ls())
nxt()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"James")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
play()
rm(list = ls())
nxt()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
play()
rm(list = ls())
nxt()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp",'rating',"test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
add2 <- function(x,y) {
x + y
}
add2(3,5)
above <- function(x,n){
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n=10){
use <- x > n
x[use]
}
above(x,12)
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y,removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
ls.rm
rm
swirl()
library(swirl)
swirl()
play()
ls()
rm(list=ls())
nxt()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
6 <= 7
10 <= 10
5 != 7
!(5 = 7)
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins","twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
play()
ls()
rm(list = ls())
nxt()
mean(c(2,4,5))
swirl()
library(swirl)
swirl()
swirl()
Sys.Date()
mean(c(2,4,5))
returnarg <- function(x){}
returnarg <- function(x){x}
returnarg(3)
returnarg(6)
returnarg <- function(x){x}
submit
submit()
returnarg <- function(x){x}
submit()
swirl()
library(swirl)
swirl()
2
swirl()
Sys.Date()
mean(c(2,4,5))
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
q()
options(editor = "internal")
library(swirl)
swirl()
submit()
boring_function("My first function!")
boring_function
submit()
submit()
submit()
play()
my_mean(c(1,2,3,4))
my_mean
nxt()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){dat[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[lenth(x)]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("and","don't")
submit()
mad_libs("the moon", "smelly", "sandwich")
play()
mad_libs(c("the moon", "smelly", "sandwich"))
args(mad_libs)
args <- list("the moon", "smelly", "sandwich")
args
submit()
mad_libs <- function(...){
args <- list(...)
place <- args[[1]]
adjective <- args[[2]]
noun <- args[[3]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("the moon", "smelly", "sandwich")
play()
nxt()
submit()
"I" %p% "love" %p% "R!"
q()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
unique_vals <- sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unqiue, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
getwd()
setwd(~/ProgrammingAssignment2)
setwd(~ProgrammingAssignment2)
setwd("~/ProgrammingAssignment2")
setwd("C:/Users/James/Documents/Coursera/ProgrammingAssignment2")
getwd()
source("cachematrix.R"")
source("cachematrix.R)
source("cachematrix.R")
y <- matrix(1:9)
y
y <- matrix(1:9,3,3)
y
y2 <- makeCacheMatrix(y)
y2
ySolve <- cacheSolve(y2)
?solve
source("cachematrix.R")
y <- matrix(1:9,3,3)
y2 <- makeCacheMatrix(y)
ySolve <- cacheSolve(y2)
y <- matrix(rnorm(1:9),3,3)
y
y2 <- makeCacheMatrix(y)
ySolve <- cacheSolve(y2)
ySolve
cacheSolve(y2)
